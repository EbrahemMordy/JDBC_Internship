package org.intern.model;

/**
 * Student Model Class (Entity/POJO)
 * 
 * This class represents a Student entity that maps to a database table.
 * In JDBC, we use such classes to represent data from database tables.
 * 
 * Key concepts for interns:
 * - POJO (Plain Old Java Object): Simple class with private fields and public getters/setters
 * - Entity: Represents a database table row as a Java object
 * - Encapsulation: Private fields with public accessor methods
 * 
 * This Student class will map to a 'students' table with columns:
 * - id (primary key, auto-increment)
 * - name (student's full name)
 * - email (student's email address)
 * - age (student's age)
 * - course (student's course/major)
 */
public class Student {
    
    // Private fields - these correspond to database table columns
    private int id;           // Primary key (auto-generated by database)
    private String name;      // Student's full name
    private String email;     // Student's email address
    private int age;          // Student's age
    private String course;    // Student's course/major
    
    // Default constructor - required for creating empty Student objects
    public Student() {
    }
    
    // Constructor without ID - used when creating new students (ID will be auto-generated)
    public Student(String name, String email, int age, String course) {
        this.name = name;
        this.email = email;
        this.age = age;
        this.course = course;
    }
    
    // Constructor with ID - used when retrieving students from database
    public Student(int id, String name, String email, int age, String course) {
        this.id = id;
        this.name = name;
        this.email = email;
        this.age = age;
        this.course = course;
    }
    
    // Getter and Setter methods
    // These methods provide controlled access to private fields
    
    /**
     * Get student ID
     * @return student's unique identifier
     */
    public int getId() {
        return id;
    }
    
    /**
     * Set student ID
     * @param id student's unique identifier
     */
    public void setId(int id) {
        this.id = id;
    }
    
    /**
     * Get student name
     * @return student's full name
     */
    public String getName() {
        return name;
    }
    
    /**
     * Set student name
     * @param name student's full name
     */
    public void setName(String name) {
        this.name = name;
    }
    
    /**
     * Get student email
     * @return student's email address
     */
    public String getEmail() {
        return email;
    }
    
    /**
     * Set student email
     * @param email student's email address
     */
    public void setEmail(String email) {
        this.email = email;
    }
    
    /**
     * Get student age
     * @return student's age
     */
    public int getAge() {
        return age;
    }
    
    /**
     * Set student age
     * @param age student's age
     */
    public void setAge(int age) {
        this.age = age;
    }
    
    /**
     * Get student course
     * @return student's course/major
     */
    public String getCourse() {
        return course;
    }
    
    /**
     * Set student course
     * @param course student's course/major
     */
    public void setCourse(String course) {
        this.course = course;
    }
    
    /**
     * toString method - provides string representation of Student object
     * Useful for printing student information
     * 
     * @return formatted string with student details
     */
    @Override
    public String toString() {
        return "Student{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", email='" + email + '\'' +
                ", age=" + age +
                ", course='" + course + '\'' +
                '}';
    }
    
    /**
     * equals method - compares two Student objects
     * Two students are equal if they have the same ID
     * 
     * @param obj object to compare with
     * @return true if students are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Student student = (Student) obj;
        return id == student.id;
    }
    
    /**
     * hashCode method - generates hash code for Student object
     * Used in collections like HashMap, HashSet
     * 
     * @return hash code based on student ID
     */
    @Override
    public int hashCode() {
        return Integer.hashCode(id);
    }
}
